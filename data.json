[{"name":"ContextFeatureExtractor","description":"A ContextFeatureExtractor generates features from the words in the context of the specified constituent. The constructor specifies the context size. To use this class, after creating the object, add other feature extractors using the FeatureCollection.addFeatureExtractor(FeatureExtractor) method. Then, for each neighboring word, the feature extractor will generate features using all the extractors that have been added. Note: This class only generates features from neighboring words. To go beyond words, new code needs to be written as required.\nKeywords: None","testcode":"package edu.illinois.cs.cogcomp.edison.features;import edu.illinois.cs.cogcomp.core.datastructures.textannotation.Constituent;import edu.illinois.cs.cogcomp.core.datastructures.textannotation.TextAnnotation;import edu.illinois.cs.cogcomp.core.datastructures.textannotation.TextAnnotationUtilities;import edu.illinois.cs.cogcomp.edison.features.helpers.WordHelpers;import edu.illinois.cs.cogcomp.edison.utilities.EdisonException;import junit.framework.TestCase;import java.util.Arrays;import java.util.HashSet;import java.util.Set;/** * @author Vivek Srikumar */public class TestContextFeatureExtractor extends TestCase {    protected void setUp() throws Exception {        super.setUp();    }    public void testGetFeaturesIndexWithoutConstituent() throws EdisonException {        ContextFeatureExtractor fex \u003d new ContextFeatureExtractor(2, true, true);        fex.addFeatureExtractor(new WordFeatureExtractor() {            @Override            public Set\u003cFeature\u003e getWordFeatures(TextAnnotation ta, int wordPosition)                    throws EdisonException {                String s \u003d WordHelpers.getWord(ta, wordPosition).toLowerCase();                Set\u003cFeature\u003e ss \u003d new HashSet\u003c\u003e();                ss.add(DiscreteFeature.create(s));                return ss;            }        });        TextAnnotation ta \u003d                TextAnnotationUtilities                        .createFromTokenizedString(\"This is a test for the feature extractor .\");        Constituent c1 \u003d new Constituent(\"\", \"\", ta, 2, 3);        Set\u003cString\u003e c1fs \u003d new HashSet\u003c\u003e();        c1fs.addAll(Arrays.asList(\"context-2:#word#:this\", \"context-1:#word#:is\",                \"context1:#word#:test\", \"context2:#word#:for\"));        Set\u003cFeature\u003e c1f \u003d FeatureUtilities.getFeatures(c1fs);        Set\u003cFeature\u003e features \u003d fex.getFeatures(c1);        c1f.removeAll(features);        assertEquals(0, c1f.size());        Constituent c2 \u003d new Constituent(\"\", \"\", ta, 2, 4);        Set\u003cString\u003e c2fs \u003d new HashSet\u003c\u003e();        c2fs.addAll(Arrays.asList(\"context-2:#word#:this\", \"context-1:#word#:is\",                \"context1:#word#:for\", \"context2:#word#:the\"));        Set\u003cFeature\u003e c2f \u003d FeatureUtilities.getFeatures(c2fs);        c2f.removeAll(fex.getFeatures(c2));        assertEquals(0, c2f.size());    }    public void testGetFeaturesIndexWithConstituent() throws EdisonException {        ContextFeatureExtractor fex \u003d new ContextFeatureExtractor(2, true, false);        fex.addFeatureExtractor(new WordFeatureExtractor() {            @Override            public Set\u003cFeature\u003e getWordFeatures(TextAnnotation ta, int wordPosition)                    throws EdisonException {                String s \u003d WordHelpers.getWord(ta, wordPosition).toLowerCase();                Set\u003cFeature\u003e ss \u003d new HashSet\u003c\u003e();                ss.add(DiscreteFeature.create(s));                return ss;            }        });        TextAnnotation ta \u003d                TextAnnotationUtilities                        .createFromTokenizedString(\"This is a test for the feature extractor .\");        Constituent c1 \u003d new Constituent(\"\", \"\", ta, 2, 3);        Set\u003cString\u003e c1fs \u003d new HashSet\u003c\u003e();        c1fs.addAll(Arrays.asList(\"context-2:#word#:this\", \"context-1:#word#:is\",                \"context*:#word#:a\", \"context1:#word#:test\", \"context2:#word#:for\"));        Set\u003cFeature\u003e c1f \u003d FeatureUtilities.getFeatures(c1fs);        Set\u003cFeature\u003e features \u003d fex.getFeatures(c1);        c1f.removeAll(features);        assertEquals(0, c1f.size());        Constituent c2 \u003d new Constituent(\"\", \"\", ta, 2, 4);        Set\u003cString\u003e c2fs \u003d new HashSet\u003c\u003e();        c2fs.addAll(Arrays.asList(\"context-2:#word#:this\", \"context-1:#word#:is\",                \"context*:#word#:a\", \"context*:#word#:test\", \"context1:#word#:for\",                \"context2:#word#:the\"));        Set\u003cFeature\u003e c2f \u003d FeatureUtilities.getFeatures(c2fs);        c2f.removeAll(fex.getFeatures(c2));        assertEquals(0, c2f.size());    }    public void testGetFeaturesNoIndexWithoutConstituent() throws EdisonException {        ContextFeatureExtractor fex \u003d new ContextFeatureExtractor(2, false, true);        fex.addFeatureExtractor(new WordFeatureExtractor() {            @Override            public Set\u003cFeature\u003e getWordFeatures(TextAnnotation ta, int wordPosition)                    throws EdisonException {                String s \u003d WordHelpers.getWord(ta, wordPosition).toLowerCase();                Set\u003cString\u003e ss \u003d new HashSet\u003c\u003e();                ss.add(s);                return FeatureUtilities.getFeatures(ss);            }        });        TextAnnotation ta \u003d                TextAnnotationUtilities                        .createFromTokenizedString(\"This is a test for the feature extractor .\");        Constituent c1 \u003d new Constituent(\"\", \"\", ta, 2, 3);        Set\u003cString\u003e c1fs \u003d new HashSet\u003c\u003e();        c1fs.addAll(Arrays.asList(\"context:#word#:this\", \"context:#word#:is\",                \"context:#word#:test\", \"context:#word#:for\"));        Set\u003cFeature\u003e c1f \u003d FeatureUtilities.getFeatures(c1fs);        c1f.removeAll(fex.getFeatures(c1));        assertEquals(0, c1f.size());        Constituent c2 \u003d new Constituent(\"\", \"\", ta, 2, 4);        Set\u003cString\u003e c2fs \u003d new HashSet\u003c\u003e();        c2fs.addAll(Arrays.asList(\"context:#word#:this\", \"context:#word#:is\", \"context:#word#:for\",                \"context:#word#:the\"));        Set\u003cFeature\u003e c2f \u003d FeatureUtilities.getFeatures(c2fs);        c2f.removeAll(fex.getFeatures(c2));        assertEquals(0, c2f.size());    }    public void testGetFeaturesNoIndexWithConstituent() throws EdisonException {        ContextFeatureExtractor fex \u003d new ContextFeatureExtractor(2, false, false);        fex.addFeatureExtractor(new WordFeatureExtractor() {            @Override            public Set\u003cFeature\u003e getWordFeatures(TextAnnotation ta, int wordPosition)                    throws EdisonException {                String s \u003d WordHelpers.getWord(ta, wordPosition).toLowerCase();                Set\u003cString\u003e ss \u003d new HashSet\u003c\u003e();                ss.add(s);                return FeatureUtilities.getFeatures(ss);            }        });        TextAnnotation ta \u003d                TextAnnotationUtilities                        .createFromTokenizedString(\"This is a test for the feature extractor .\");        Constituent c1 \u003d new Constituent(\"\", \"\", ta, 2, 3);        Set\u003cString\u003e c1fs \u003d new HashSet\u003c\u003e();        c1fs.addAll(Arrays.asList(\"context:#word#:this\", \"context:#word#:is\", \"context:#word#:a\",                \"context:#word#:test\", \"context:#word#:for\"));        Set\u003cFeature\u003e c1f \u003d FeatureUtilities.getFeatures(c1fs);        c1f.removeAll(fex.getFeatures(c1));        assertEquals(0, c1f.size());        Constituent c2 \u003d new Constituent(\"\", \"\", ta, 2, 4);        Set\u003cString\u003e c2fs \u003d new HashSet\u003c\u003e();        c2fs.addAll(Arrays.asList(\"context:#word#:this\", \"context:#word#:is\", \"context:#word#:a\",                \"context:#word#:test\", \"context:#word#:for\", \"context:#word#:the\"));        Set\u003cFeature\u003e c2f \u003d FeatureUtilities.getFeatures(c2fs);        c2f.removeAll(fex.getFeatures(c2));        assertEquals(0, c2f.size());    }}","javadoc_url":"http://cogcomp.cs.illinois.edu/software/doc/apidocs/edu/illinois/cs/cogcomp/edison/features/ContextFeatureExtractor.html","annotations":"None"}]