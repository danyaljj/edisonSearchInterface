[{"name":"LabelOneAfter","description":"This feature extractor extracts part of speeches of the words one after each word in a span.\nKeywords: pos-tagger, after","testcode":"test() throws Exception {\n        System.out.println(\"LabelOneAfter Feature Extractor\");\n        // Using the first TA and a constituent between span of 30-40 as a test\n        TextAnnotation ta \u003d tas.get(2);\n        View TOKENS \u003d ta.getView(\"TOKENS\");\n\n        System.out.println(\"GOT TOKENS FROM TEXTAnn\");\n\n        List\u003cConstituent\u003e testlist \u003d TOKENS.getConstituentsCoveringSpan(0, 20);\n\n        for (Constituent c : testlist) {\n            System.out.println(c.getSurfaceForm());\n        }\n\n        System.out.println(\"Testlist size is \" + testlist.size());\n\n        // Constituent test \u003d testlist.get(1);\n\n        // System.out.println(\"The constituent we are extracting features from\n        // in this test is: \" + test.getSurfaceForm());\n\n        // String fileName \u003d\n        // \"C:\\\\Users\\\\Jason\\\\Desktop\\\\UIUC 2015 Fall\\\\Cogcomp\\\\pos-translation\\\\pos\";\n\n        POSBaseLineCounter posBaseLine \u003d new POSBaseLineCounter(\"posBaseLine\");\n        posBaseLine.buildTable(TestPosHelper.corpus);\n\n        POSMikheevCounter posMikheev \u003d new POSMikheevCounter(\"posMikheev\");\n        posMikheev.buildTable(TestPosHelper.corpus);\n\n        LabelOneAfter l1aPOS \u003d new LabelOneAfter(\"l1aPOS\");\n        LabelOneAfter l1aPOSBaseLine \u003d new LabelOneAfter(\"l1aPOSBaseLine\", posBaseLine);\n        LabelOneAfter l1aPOSMikheev \u003d new LabelOneAfter(\"l1aPOSMikheev\", posMikheev);\n\n        // Test when using POS View\n        ArrayList\u003cSet\u003cFeature\u003e\u003e featslist \u003d new ArrayList\u003c\u003e();\n\n        for (Constituent test : testlist)\n            featslist.add(l1aPOS.getFeatures(test));\n\n        if (featslist.isEmpty()) {\n            System.out.println(\"Feats list is returning NULL.\");\n        }\n\n        System.out.println(\"\\n\" + \"Test when using POS View\");\n        System.out.println(\"Printing list of Feature set\");\n\n        for (Set\u003cFeature\u003e feats : featslist) {\n            for (Feature f : feats)\n                System.out.println(f.getName());\n        }\n\n        // Test when using POS baseline Counting\n        featslist.clear();\n\n        for (Constituent test : testlist)\n            featslist.add(l1aPOSBaseLine.getFeatures(test));\n\n        if (featslist.isEmpty()) {\n            System.out.println(\"Feats list is returning NULL.\");\n        }\n\n        System.out.println(\"\\n\" + \"Test when using POS baseline Counting\");\n        System.out.println(\"Printing list of Feature set\");\n\n        for (Set\u003cFeature\u003e feats : featslist) {\n            for (Feature f : feats)\n                System.out.println(f.getName());\n        }\n        // Test when using POS Mikheev Counting\n        featslist.clear();\n\n        for (Constituent test : testlist)\n            featslist.add(l1aPOSMikheev.getFeatures(test));\n\n        if (featslist.isEmpty()) {\n            System.out.println(\"Feats list is returning NULL.\");\n        }\n\n        System.out.println(\"\\n\" + \"Test when using POS Mikheev Counting\");\n        System.out.println(\"Printing list of Feature set\");\n\n        for (Set\u003cFeature\u003e feats : featslist) {\n            for (Feature f : feats)\n                System.out.println(f.getName());\n        }\n\n        System.out.println(\"GOT FEATURES YES!\");\n    }\n\n    private void testFex(FeatureExtractor fex, boolean printBoth, String... viewNames)\n            throws EdisonException {\n\n        for (TextAnnotation ta : tas) {\n            for (String viewName : viewNames)\n                if (ta.hasView(viewName))\n                    System.out.println(ta.getView(viewName));\n        }\n    }\n}\n","javadoc_url":"http://cogcomp.cs.illinois.edu/software/doc/apidocs/edu/illinois/cs/cogcomp/edison/features/LabelOneAfter.html","annotations":"pos-tagger, after"},{"name":"LabelOneBefore","description":"This feature extractor extracts part of speeches of the words one before each word in a span.\nKeywords: pos-tagger, before","testcode":"test() throws Exception {\n        System.out.println(\"LabelOneBefore Feature Extractor\");\n        // Using the first TA and a constituent between span of 30-40 as a test\n        TextAnnotation ta \u003d tas.get(2);\n        View TOKENS \u003d ta.getView(\"TOKENS\");\n\n        System.out.println(\"GOT TOKENS FROM TEXTAnn\");\n\n        List\u003cConstituent\u003e testlist \u003d TOKENS.getConstituentsCoveringSpan(0, 20);\n\n        for (Constituent c : testlist) {\n            System.out.println(c.getSurfaceForm());\n        }\n\n        System.out.println(\"Testlist size is \" + testlist.size());\n\n        // Constituent test \u003d testlist.get(1);\n\n        // System.out.println(\"The constituent we are extracting features from\n        // in this test is: \" + test.getSurfaceForm());\n\n\n        POSBaseLineCounter posBaseLine \u003d new POSBaseLineCounter(\"posBaseLine\");\n        posBaseLine.buildTable(TestPosHelper.corpus);\n\n        POSMikheevCounter posMikheev \u003d new POSMikheevCounter(\"posMikheev\");\n        posMikheev.buildTable(TestPosHelper.corpus);\n\n        LabelOneBefore l1bPOS \u003d new LabelOneBefore(\"l1bPOS\");\n        LabelOneBefore l1bPOSBaseLine \u003d new LabelOneBefore(\"l1bPOSBaseLine\", posBaseLine);\n        LabelOneBefore l1bPOSMikheev \u003d new LabelOneBefore(\"l1bPOSMikheev\", posMikheev);\n\n        // Test when using POS View\n        ArrayList\u003cSet\u003cFeature\u003e\u003e featslist \u003d new ArrayList\u003c\u003e();\n\n        for (Constituent test : testlist)\n            featslist.add(l1bPOS.getFeatures(test));\n\n        if (featslist.isEmpty()) {\n            System.out.println(\"Feats list is returning NULL.\");\n        }\n\n        System.out.println(\"\\n\" + \"Test when using POS View\");\n        System.out.println(\"Printing list of Feature set\");\n\n        for (Set\u003cFeature\u003e feats : featslist) {\n            for (Feature f : feats)\n                System.out.println(f.getName());\n        }\n\n        // Test when using POS baseline Counting\n        featslist.clear();\n\n        for (Constituent test : testlist)\n            featslist.add(l1bPOSBaseLine.getFeatures(test));\n\n        if (featslist.isEmpty()) {\n            System.out.println(\"Feats list is returning NULL.\");\n        }\n\n        System.out.println(\"\\n\" + \"Test when using POS baseline Counting\");\n        System.out.println(\"Printing list of Feature set\");\n\n        for (Set\u003cFeature\u003e feats : featslist) {\n            for (Feature f : feats)\n                System.out.println(f.getName());\n        }\n        // Test when using POS Mikheev Counting\n        featslist.clear();\n\n        for (Constituent test : testlist)\n            featslist.add(l1bPOSMikheev.getFeatures(test));\n\n        if (featslist.isEmpty()) {\n            System.out.println(\"Feats list is returning NULL.\");\n        }\n\n        System.out.println(\"\\n\" + \"Test when using POS Mikheev Counting\");\n        System.out.println(\"Printing list of Feature set\");\n\n        for (Set\u003cFeature\u003e feats : featslist) {\n            for (Feature f : feats)\n                System.out.println(f.getName());\n        }\n\n        System.out.println(\"GOT FEATURES YES!\");\n    }\n\n    private void testFex(FeatureExtractor fex, boolean printBoth, String... viewNames)\n            throws EdisonException {\n\n        for (TextAnnotation ta : tas) {\n            for (String viewName : viewNames)\n                if (ta.hasView(viewName))\n                    System.out.println(ta.getView(viewName));\n        }\n    }\n}\n","javadoc_url":"http://cogcomp.cs.illinois.edu/software/doc/apidocs/edu/illinois/cs/cogcomp/edison/features/LabelOneBefore.html","annotations":"pos-tagger, before"},{"name":"LabelTwoAfter","description":"This feature extractor extracts part of speeches of the words two after each word in a span.\nKeywords: pos-tagger, after","testcode":"test() throws Exception {\n        System.out.println(\"LabelTwoAfter Feature Extractor\");\n        // Using the first TA and a constituent between span of 30-40 as a test\n        TextAnnotation ta \u003d tas.get(2);\n        View TOKENS \u003d ta.getView(\"TOKENS\");\n\n        System.out.println(\"GOT TOKENS FROM TEXTAnn\");\n\n        List\u003cConstituent\u003e testlist \u003d TOKENS.getConstituentsCoveringSpan(0, 20);\n\n        for (Constituent c : testlist) {\n            System.out.println(c.getSurfaceForm());\n        }\n\n        System.out.println(\"Testlist size is \" + testlist.size());\n\n        // Constituent test \u003d testlist.get(1);\n\n        // System.out.println(\"The constituent we are extracting features from\n        // in this test is: \" + test.getSurfaceForm());\n\n\n        POSBaseLineCounter posBaseLine \u003d new POSBaseLineCounter(\"posBaseLine\");\n        posBaseLine.buildTable(TestPosHelper.corpus);\n\n        POSMikheevCounter posMikheev \u003d new POSMikheevCounter(\"posMikheev\");\n        posMikheev.buildTable(TestPosHelper.corpus);\n\n        LabelTwoAfter l2aPOS \u003d new LabelTwoAfter(\"l2aPOS\");\n        LabelTwoAfter l2aPOSBaseLine \u003d new LabelTwoAfter(\"l2aPOSBaseLine\", posBaseLine);\n        LabelTwoAfter l2aPOSMikheev \u003d new LabelTwoAfter(\"l2aPOSMikheev\", posMikheev);\n\n        // Test when using POS View\n        ArrayList\u003cSet\u003cFeature\u003e\u003e featslist \u003d new ArrayList\u003c\u003e();\n\n        for (Constituent test : testlist)\n            featslist.add(l2aPOS.getFeatures(test));\n\n        if (featslist.isEmpty()) {\n            System.out.println(\"Feats list is returning NULL.\");\n        }\n\n        System.out.println(\"\\n\" + \"Test when using POS View\");\n        System.out.println(\"Printing list of Feature set\");\n\n        for (Set\u003cFeature\u003e feats : featslist) {\n            for (Feature f : feats)\n                System.out.println(f.getName());\n        }\n\n        // Test when using POS baseline Counting\n        featslist.clear();\n\n        for (Constituent test : testlist)\n            featslist.add(l2aPOSBaseLine.getFeatures(test));\n\n        if (featslist.isEmpty()) {\n            System.out.println(\"Feats list is returning NULL.\");\n        }\n\n        System.out.println(\"\\n\" + \"Test when using POS baseline Counting\");\n        System.out.println(\"Printing list of Feature set\");\n\n        for (Set\u003cFeature\u003e feats : featslist) {\n            for (Feature f : feats)\n                System.out.println(f.getName());\n        }\n        // Test when using POS Mikheev Counting\n        featslist.clear();\n\n        for (Constituent test : testlist)\n            featslist.add(l2aPOSMikheev.getFeatures(test));\n\n        if (featslist.isEmpty()) {\n            System.out.println(\"Feats list is returning NULL.\");\n        }\n\n        System.out.println(\"\\n\" + \"Test when using POS Mikheev Counting\");\n        System.out.println(\"Printing list of Feature set\");\n\n        for (Set\u003cFeature\u003e feats : featslist) {\n            for (Feature f : feats)\n                System.out.println(f.getName());\n        }\n\n        System.out.println(\"GOT FEATURES YES!\");\n    }\n\n    private void testFex(FeatureExtractor fex, boolean printBoth, String... viewNames)\n            throws EdisonException {\n\n        for (TextAnnotation ta : tas) {\n            for (String viewName : viewNames)\n                if (ta.hasView(viewName))\n                    System.out.println(ta.getView(viewName));\n        }\n    }\n}\n","javadoc_url":"http://cogcomp.cs.illinois.edu/software/doc/apidocs/edu/illinois/cs/cogcomp/edison/features/LabelTwoAfter.html","annotations":"pos-tagger, after"},{"name":"LabelTwoBefore","description":"This feature extractor extracts part of speeches of the words two before each word in a span.\nKeywords: pos-tagger, before","testcode":"test() throws Exception {\n        System.out.println(\"LabelTwoBefore Feature Extractor\");\n        // Using the first TA and a constituent between span of 30-40 as a test\n        TextAnnotation ta \u003d tas.get(2);\n        View TOKENS \u003d ta.getView(\"TOKENS\");\n\n        System.out.println(\"GOT TOKENS FROM TEXTAnn\");\n\n        List\u003cConstituent\u003e testlist \u003d TOKENS.getConstituentsCoveringSpan(0, 20);\n\n        for (Constituent c : testlist) {\n            System.out.println(c.getSurfaceForm());\n        }\n\n        System.out.println(\"Testlist size is \" + testlist.size());\n\n        // Constituent test \u003d testlist.get(1);\n\n        // System.out.println(\"The constituent we are extracting features from\n        // in this test is: \" + test.getSurfaceForm());\n\n\n        POSBaseLineCounter posBaseLine \u003d new POSBaseLineCounter(\"posBaseLine\");\n        posBaseLine.buildTable(TestPosHelper.corpus);\n\n        POSMikheevCounter posMikheev \u003d new POSMikheevCounter(\"posMikheev\");\n        posMikheev.buildTable(TestPosHelper.corpus);\n\n        LabelTwoBefore l2bPOS \u003d new LabelTwoBefore(\"l2bPOS\");\n        LabelTwoBefore l2bPOSBaseLine \u003d new LabelTwoBefore(\"l2bPOSBaseLine\", posBaseLine);\n        LabelTwoBefore l2bPOSMikheev \u003d new LabelTwoBefore(\"l2bPOSMikheev\", posMikheev);\n\n        // Test when using POS View\n        ArrayList\u003cSet\u003cFeature\u003e\u003e featslist \u003d new ArrayList\u003c\u003e();\n\n        for (Constituent test : testlist)\n            featslist.add(l2bPOS.getFeatures(test));\n\n        if (featslist.isEmpty()) {\n            System.out.println(\"Feats list is returning NULL.\");\n        }\n\n        System.out.println(\"\\n\" + \"Test when using POS View\");\n        System.out.println(\"Printing list of Feature set\");\n\n        for (Set\u003cFeature\u003e feats : featslist) {\n            for (Feature f : feats)\n                System.out.println(f.getName());\n        }\n\n        // Test when using POS baseline Counting\n        featslist.clear();\n\n        for (Constituent test : testlist)\n            featslist.add(l2bPOSBaseLine.getFeatures(test));\n\n        if (featslist.isEmpty()) {\n            System.out.println(\"Feats list is returning NULL.\");\n        }\n\n        System.out.println(\"\\n\" + \"Test when using POS baseline Counting\");\n        System.out.println(\"Printing list of Feature set\");\n\n        for (Set\u003cFeature\u003e feats : featslist) {\n            for (Feature f : feats)\n                System.out.println(f.getName());\n        }\n        // Test when using POS Mikheev Counting\n        featslist.clear();\n\n        for (Constituent test : testlist)\n            featslist.add(l2bPOSMikheev.getFeatures(test));\n\n        if (featslist.isEmpty()) {\n            System.out.println(\"Feats list is returning NULL.\");\n        }\n\n        System.out.println(\"\\n\" + \"Test when using POS Mikheev Counting\");\n        System.out.println(\"Printing list of Feature set\");\n\n        for (Set\u003cFeature\u003e feats : featslist) {\n            for (Feature f : feats)\n                System.out.println(f.getName());\n        }\n\n        System.out.println(\"GOT FEATURES YES!\");\n    }\n\n    private void testFex(FeatureExtractor fex, boolean printBoth, String... viewNames)\n            throws EdisonException {\n\n        for (TextAnnotation ta : tas) {\n            for (String viewName : viewNames)\n                if (ta.hasView(viewName))\n                    System.out.println(ta.getView(viewName));\n        }\n    }\n}\n","javadoc_url":"http://cogcomp.cs.illinois.edu/software/doc/apidocs/edu/illinois/cs/cogcomp/edison/features/LabelTwoBefore.html","annotations":"pos-tagger, before"},{"name":"POSBaseLineFeatureExtractor","description":"This feature extractor extracts part of speech based on baseline counting.\nKeywords: None","testcode":"test() throws Exception {\n        System.out.println(\"POSBaseLine Feature Extractor\");\n        // Using the first TA and a constituent between span of 30-40 as a test\n        TextAnnotation ta \u003d tas.get(2);\n        View TOKENS \u003d ta.getView(\"TOKENS\");\n\n        System.out.println(\"GOT TOKENS FROM TEXTAnn\");\n\n        List\u003cConstituent\u003e testlist \u003d TOKENS.getConstituentsCoveringSpan(0, 20);\n\n        for (Constituent c : testlist) {\n            System.out.println(c.getSurfaceForm());\n        }\n\n        System.out.println(\"Testlist size is \" + testlist.size());\n\n        // Constituent test \u003d testlist.get(1);\n\n        // System.out.println(\"The constituent we are extracting features from\n        // in this test is: \" + test.getSurfaceForm());\n\n        // System.out.println(TestPOSBaseLineFeatureExtractor.class.getProtectionDomain().getCodeSource().getLocation());\n        // System.out.println(System.getProperty(\"user.dir\"));\n\n        POSBaseLineFeatureExtractor posBaseLine \u003d\n                new POSBaseLineFeatureExtractor(\"posBaseLine\", \"test_corpus\", TestPosHelper.corpus);\n\n        ArrayList\u003cSet\u003cFeature\u003e\u003e featslist \u003d new ArrayList\u003c\u003e();\n\n        for (Constituent test : testlist)\n            featslist.add(posBaseLine.getFeatures(test));\n\n        if (featslist.isEmpty()) {\n            System.out.println(\"Feats list is returning NULL.\");\n        }\n\n        System.out.println(\"Printing list of Feature set\");\n\n        for (Set\u003cFeature\u003e feats : featslist) {\n            for (Feature f : feats)\n                System.out.println(f.getName());\n        }\n\n        /*\n         * Set\u003cFeature\u003e feats \u003d posBaseLine.getFeatures(test);\n         * \n         * if (feats \u003d\u003d null) { System.out.println(\"Feats are returning NULL.\"); }\n         * \n         * System.out.println(\"Printing Set of Features\");\n         * \n         * for (Feature f : feats) { System.out.println(f.getName()); }\n         */\n\n        System.out.println(\"GOT FEATURES YES!\");\n    }\n\n    private void testFex(FeatureExtractor fex, boolean printBoth, String... viewNames)\n            throws EdisonException {\n\n        for (TextAnnotation ta : tas) {\n            for (String viewName : viewNames)\n                if (ta.hasView(viewName))\n                    System.out.println(ta.getView(viewName));\n        }\n    }\n}\n","javadoc_url":"http://cogcomp.cs.illinois.edu/software/doc/apidocs/edu/illinois/cs/cogcomp/edison/features/POSBaseLineFeatureExtractor.html","annotations":"None"},{"name":"POSMikheevFeatureExtractor","description":"This feature extractor extracts part of speech based on Mikheev\u0027s rule.\nKeywords: None","testcode":"test() throws Exception {\n\n        POSMikheevFeatureExtractor posMikheev \u003d\n                new POSMikheevFeatureExtractor(\"posMikheev\", \"test_corpus\", TestPosHelper.corpus);\n\n        System.out.println(\"POSMikheev Feature Extractor\");\n        System.out.println(\"Only print the features with known tags\");\n        // Using the first TA and a constituent between span of 30-40 as a test\n        int i \u003d 0;\n        for (TextAnnotation ta : tas) {\n            ArrayList\u003cString\u003e outFeatures \u003d new ArrayList\u003c\u003e();\n            View TOKENS \u003d ta.getView(\"TOKENS\");\n\n            for (Constituent TOKEN : TOKENS) {\n                Set\u003cFeature\u003e feats \u003d posMikheev.getFeatures(TOKEN);\n                if (feats.isEmpty()) {\n                    System.out.println(\"Feats list is returning NULL.\");\n                }\n                for (Feature f : feats)\n                    if (!f.getName().contains(\"UNKNOWN\")) {\n                        outFeatures.add(f.getName());\n                    }\n            }\n\n            if (!outFeatures.isEmpty()) {\n                System.out.println(\"-------------------------------------------------------\");\n                System.out.println(\"Text Annotation: \" + i);\n                System.out.println(\"Text Features: \");\n\n                for (String out : outFeatures)\n                    System.out.println(out);\n\n                System.out.println(\"-------------------------------------------------------\");\n            }\n\n            i++;\n        }\n        System.out.println(\"GOT FEATURES YES!\");\n    }\n\n    private void testFex(FeatureExtractor fex, boolean printBoth, String... viewNames)\n            throws EdisonException {\n\n        for (TextAnnotation ta : tas) {\n            for (String viewName : viewNames)\n                if (ta.hasView(viewName))\n                    System.out.println(ta.getView(viewName));\n        }\n    }\n}\n","javadoc_url":"http://cogcomp.cs.illinois.edu/software/doc/apidocs/edu/illinois/cs/cogcomp/edison/features/POSMikheevFeatureExtractor.html","annotations":"None"},{"name":"POSWindow","description":"Feature extractor that senses the parts of speech of the four context words immediately surrounding the target word (two before and two after).\nKeywords: pos-tagger, window","testcode":"test() throws Exception {\n        System.out.println(\"POSWindow Feature Extractor\");\n        // Using the first TA and a constituent between span of 30-40 as a test\n        TextAnnotation ta \u003d tas.get(2);\n        View TOKENS \u003d ta.getView(\"TOKENS\");\n\n        System.out.println(\"GOT TOKENS FROM TEXTAnn\");\n\n        List\u003cConstituent\u003e testlist \u003d TOKENS.getConstituentsCoveringSpan(0, 20);\n\n        for (Constituent c : testlist) {\n            System.out.println(c.getSurfaceForm());\n        }\n\n        System.out.println(\"Testlist size is \" + testlist.size());\n\n\n        POSBaseLineCounter posBaseLine \u003d new POSBaseLineCounter(\"posBaseLine\");\n        posBaseLine.buildTable(TestPosHelper.corpus);\n\n        POSMikheevCounter posMikheev \u003d new POSMikheevCounter(\"posMikheev\");\n        posMikheev.buildTable(TestPosHelper.corpus);\n\n        POSWindow posWindowPOS \u003d new POSWindow(\"posWindowPOS\");\n        POSWindow posWindowPOSBaseLine \u003d new POSWindow(\"posWindowPOSBaseLine\", posBaseLine);\n        POSWindow posWindowPOSMikheev \u003d new POSWindow(\"posWindowPOSMikheev\", posMikheev);\n\n        // Test when using POS View\n        ArrayList\u003cSet\u003cFeature\u003e\u003e featslist \u003d new ArrayList\u003c\u003e();\n\n        for (Constituent test : testlist)\n            featslist.add(posWindowPOS.getFeatures(test));\n\n        if (featslist.isEmpty()) {\n            System.out.println(\"Feats list is returning NULL.\");\n        }\n\n        System.out.println(\"\\n\" + \"Test when using POS View\");\n        System.out.println(\"Printing list of Feature set\");\n\n        for (Set\u003cFeature\u003e feats : featslist) {\n            System.out.println(\"\\n\");\n            for (Feature f : feats)\n                System.out.println(f.getName());\n        }\n\n        // Test when using POS baseline Counting\n        featslist.clear();\n\n        for (Constituent test : testlist)\n            featslist.add(posWindowPOSBaseLine.getFeatures(test));\n\n        if (featslist.isEmpty()) {\n            System.out.println(\"Feats list is returning NULL.\");\n        }\n\n        System.out.println(\"\\n\" + \"Test when using POS baseline Counting\");\n        System.out.println(\"Printing list of Feature set\");\n\n        for (Set\u003cFeature\u003e feats : featslist) {\n            System.out.println(\"\\n\");\n            for (Feature f : feats)\n                System.out.println(f.getName());\n        }\n        // Test when using POS Mikheev Counting\n        featslist.clear();\n\n        for (Constituent test : testlist)\n            featslist.add(posWindowPOSMikheev.getFeatures(test));\n\n        if (featslist.isEmpty()) {\n            System.out.println(\"Feats list is returning NULL.\");\n        }\n\n        System.out.println(\"\\n\" + \"Test when using POS Mikheev Counting\");\n        System.out.println(\"Printing list of Feature set\");\n\n        for (Set\u003cFeature\u003e feats : featslist) {\n            System.out.println(\"\\n\");\n            for (Feature f : feats)\n                System.out.println(f.getName());\n        }\n\n        System.out.println(\"GOT FEATURES YES!\");\n    }\n\n    private void testFex(FeatureExtractor fex, boolean printBoth, String... viewNames)\n            throws EdisonException {\n\n        for (TextAnnotation ta : tas) {\n            for (String viewName : viewNames)\n                if (ta.hasView(viewName))\n                    System.out.println(ta.getView(viewName));\n        }\n    }\n}\n","javadoc_url":"http://cogcomp.cs.illinois.edu/software/doc/apidocs/edu/illinois/cs/cogcomp/edison/features/POSWindow.html","annotations":"pos-tagger, window"}]