[{"name":"LabelOneAfter","description":"This feature extractor extracts part of speeches of the words one after each word in a span.\nKeywords: pos-tagger, after","testcode":"test() throws Exception {        System.out.println(\"LabelOneAfter Feature Extractor\");        // Using the first TA and a constituent between span of 30-40 as a test        TextAnnotation ta \u003d tas.get(2);        View TOKENS \u003d ta.getView(\"TOKENS\");        System.out.println(\"GOT TOKENS FROM TEXTAnn\");        List\u003cConstituent\u003e testlist \u003d TOKENS.getConstituentsCoveringSpan(0, 20);        for (Constituent c : testlist) {            System.out.println(c.getSurfaceForm());        }        System.out.println(\"Testlist size is \" + testlist.size());        // Constituent test \u003d testlist.get(1);        // System.out.println(\"The constituent we are extracting features from        // in this test is: \" + test.getSurfaceForm());        // String fileName \u003d        // \"C:\\\\Users\\\\Jason\\\\Desktop\\\\UIUC 2015 Fall\\\\Cogcomp\\\\pos-translation\\\\pos\";        POSBaseLineCounter posBaseLine \u003d new POSBaseLineCounter(\"posBaseLine\");        posBaseLine.buildTable(TestPosHelper.corpus);        POSMikheevCounter posMikheev \u003d new POSMikheevCounter(\"posMikheev\");        posMikheev.buildTable(TestPosHelper.corpus);        LabelOneAfter l1aPOS \u003d new LabelOneAfter(\"l1aPOS\");        LabelOneAfter l1aPOSBaseLine \u003d new LabelOneAfter(\"l1aPOSBaseLine\", posBaseLine);        LabelOneAfter l1aPOSMikheev \u003d new LabelOneAfter(\"l1aPOSMikheev\", posMikheev);        // Test when using POS View        ArrayList\u003cSet\u003cFeature\u003e\u003e featslist \u003d new ArrayList\u003c\u003e();        for (Constituent test : testlist)            featslist.add(l1aPOS.getFeatures(test));        if (featslist.isEmpty()) {            System.out.println(\"Feats list is returning NULL.\");        }        System.out.println(\"\\n\" + \"Test when using POS View\");        System.out.println(\"Printing list of Feature set\");        for (Set\u003cFeature\u003e feats : featslist) {            for (Feature f : feats)                System.out.println(f.getName());        }        // Test when using POS baseline Counting        featslist.clear();        for (Constituent test : testlist)            featslist.add(l1aPOSBaseLine.getFeatures(test));        if (featslist.isEmpty()) {            System.out.println(\"Feats list is returning NULL.\");        }        System.out.println(\"\\n\" + \"Test when using POS baseline Counting\");        System.out.println(\"Printing list of Feature set\");        for (Set\u003cFeature\u003e feats : featslist) {            for (Feature f : feats)                System.out.println(f.getName());        }        // Test when using POS Mikheev Counting        featslist.clear();        for (Constituent test : testlist)            featslist.add(l1aPOSMikheev.getFeatures(test));        if (featslist.isEmpty()) {            System.out.println(\"Feats list is returning NULL.\");        }        System.out.println(\"\\n\" + \"Test when using POS Mikheev Counting\");        System.out.println(\"Printing list of Feature set\");        for (Set\u003cFeature\u003e feats : featslist) {            for (Feature f : feats)                System.out.println(f.getName());        }        System.out.println(\"GOT FEATURES YES!\");    }    private void testFex(FeatureExtractor fex, boolean printBoth, String... viewNames)            throws EdisonException {        for (TextAnnotation ta : tas) {            for (String viewName : viewNames)                if (ta.hasView(viewName))                    System.out.println(ta.getView(viewName));        }    }}","javadoc_url":"http://cogcomp.cs.illinois.edu/software/doc/apidocs/edu/illinois/cs/cogcomp/edison/features/LabelOneAfter.html","annotations":"pos-tagger, after"},{"name":"LabelOneBefore","description":"This feature extractor extracts part of speeches of the words one before each word in a span.\nKeywords: pos-tagger, before","testcode":"test() throws Exception {        System.out.println(\"LabelOneBefore Feature Extractor\");        // Using the first TA and a constituent between span of 30-40 as a test        TextAnnotation ta \u003d tas.get(2);        View TOKENS \u003d ta.getView(\"TOKENS\");        System.out.println(\"GOT TOKENS FROM TEXTAnn\");        List\u003cConstituent\u003e testlist \u003d TOKENS.getConstituentsCoveringSpan(0, 20);        for (Constituent c : testlist) {            System.out.println(c.getSurfaceForm());        }        System.out.println(\"Testlist size is \" + testlist.size());        // Constituent test \u003d testlist.get(1);        // System.out.println(\"The constituent we are extracting features from        // in this test is: \" + test.getSurfaceForm());        POSBaseLineCounter posBaseLine \u003d new POSBaseLineCounter(\"posBaseLine\");        posBaseLine.buildTable(TestPosHelper.corpus);        POSMikheevCounter posMikheev \u003d new POSMikheevCounter(\"posMikheev\");        posMikheev.buildTable(TestPosHelper.corpus);        LabelOneBefore l1bPOS \u003d new LabelOneBefore(\"l1bPOS\");        LabelOneBefore l1bPOSBaseLine \u003d new LabelOneBefore(\"l1bPOSBaseLine\", posBaseLine);        LabelOneBefore l1bPOSMikheev \u003d new LabelOneBefore(\"l1bPOSMikheev\", posMikheev);        // Test when using POS View        ArrayList\u003cSet\u003cFeature\u003e\u003e featslist \u003d new ArrayList\u003c\u003e();        for (Constituent test : testlist)            featslist.add(l1bPOS.getFeatures(test));        if (featslist.isEmpty()) {            System.out.println(\"Feats list is returning NULL.\");        }        System.out.println(\"\\n\" + \"Test when using POS View\");        System.out.println(\"Printing list of Feature set\");        for (Set\u003cFeature\u003e feats : featslist) {            for (Feature f : feats)                System.out.println(f.getName());        }        // Test when using POS baseline Counting        featslist.clear();        for (Constituent test : testlist)            featslist.add(l1bPOSBaseLine.getFeatures(test));        if (featslist.isEmpty()) {            System.out.println(\"Feats list is returning NULL.\");        }        System.out.println(\"\\n\" + \"Test when using POS baseline Counting\");        System.out.println(\"Printing list of Feature set\");        for (Set\u003cFeature\u003e feats : featslist) {            for (Feature f : feats)                System.out.println(f.getName());        }        // Test when using POS Mikheev Counting        featslist.clear();        for (Constituent test : testlist)            featslist.add(l1bPOSMikheev.getFeatures(test));        if (featslist.isEmpty()) {            System.out.println(\"Feats list is returning NULL.\");        }        System.out.println(\"\\n\" + \"Test when using POS Mikheev Counting\");        System.out.println(\"Printing list of Feature set\");        for (Set\u003cFeature\u003e feats : featslist) {            for (Feature f : feats)                System.out.println(f.getName());        }        System.out.println(\"GOT FEATURES YES!\");    }    private void testFex(FeatureExtractor fex, boolean printBoth, String... viewNames)            throws EdisonException {        for (TextAnnotation ta : tas) {            for (String viewName : viewNames)                if (ta.hasView(viewName))                    System.out.println(ta.getView(viewName));        }    }}","javadoc_url":"http://cogcomp.cs.illinois.edu/software/doc/apidocs/edu/illinois/cs/cogcomp/edison/features/LabelOneBefore.html","annotations":"pos-tagger, before"},{"name":"LabelTwoAfter","description":"This feature extractor extracts part of speeches of the words two after each word in a span.\nKeywords: pos-tagger, after","testcode":"test() throws Exception {        System.out.println(\"LabelTwoAfter Feature Extractor\");        // Using the first TA and a constituent between span of 30-40 as a test        TextAnnotation ta \u003d tas.get(2);        View TOKENS \u003d ta.getView(\"TOKENS\");        System.out.println(\"GOT TOKENS FROM TEXTAnn\");        List\u003cConstituent\u003e testlist \u003d TOKENS.getConstituentsCoveringSpan(0, 20);        for (Constituent c : testlist) {            System.out.println(c.getSurfaceForm());        }        System.out.println(\"Testlist size is \" + testlist.size());        // Constituent test \u003d testlist.get(1);        // System.out.println(\"The constituent we are extracting features from        // in this test is: \" + test.getSurfaceForm());        POSBaseLineCounter posBaseLine \u003d new POSBaseLineCounter(\"posBaseLine\");        posBaseLine.buildTable(TestPosHelper.corpus);        POSMikheevCounter posMikheev \u003d new POSMikheevCounter(\"posMikheev\");        posMikheev.buildTable(TestPosHelper.corpus);        LabelTwoAfter l2aPOS \u003d new LabelTwoAfter(\"l2aPOS\");        LabelTwoAfter l2aPOSBaseLine \u003d new LabelTwoAfter(\"l2aPOSBaseLine\", posBaseLine);        LabelTwoAfter l2aPOSMikheev \u003d new LabelTwoAfter(\"l2aPOSMikheev\", posMikheev);        // Test when using POS View        ArrayList\u003cSet\u003cFeature\u003e\u003e featslist \u003d new ArrayList\u003c\u003e();        for (Constituent test : testlist)            featslist.add(l2aPOS.getFeatures(test));        if (featslist.isEmpty()) {            System.out.println(\"Feats list is returning NULL.\");        }        System.out.println(\"\\n\" + \"Test when using POS View\");        System.out.println(\"Printing list of Feature set\");        for (Set\u003cFeature\u003e feats : featslist) {            for (Feature f : feats)                System.out.println(f.getName());        }        // Test when using POS baseline Counting        featslist.clear();        for (Constituent test : testlist)            featslist.add(l2aPOSBaseLine.getFeatures(test));        if (featslist.isEmpty()) {            System.out.println(\"Feats list is returning NULL.\");        }        System.out.println(\"\\n\" + \"Test when using POS baseline Counting\");        System.out.println(\"Printing list of Feature set\");        for (Set\u003cFeature\u003e feats : featslist) {            for (Feature f : feats)                System.out.println(f.getName());        }        // Test when using POS Mikheev Counting        featslist.clear();        for (Constituent test : testlist)            featslist.add(l2aPOSMikheev.getFeatures(test));        if (featslist.isEmpty()) {            System.out.println(\"Feats list is returning NULL.\");        }        System.out.println(\"\\n\" + \"Test when using POS Mikheev Counting\");        System.out.println(\"Printing list of Feature set\");        for (Set\u003cFeature\u003e feats : featslist) {            for (Feature f : feats)                System.out.println(f.getName());        }        System.out.println(\"GOT FEATURES YES!\");    }    private void testFex(FeatureExtractor fex, boolean printBoth, String... viewNames)            throws EdisonException {        for (TextAnnotation ta : tas) {            for (String viewName : viewNames)                if (ta.hasView(viewName))                    System.out.println(ta.getView(viewName));        }    }}","javadoc_url":"http://cogcomp.cs.illinois.edu/software/doc/apidocs/edu/illinois/cs/cogcomp/edison/features/LabelTwoAfter.html","annotations":"pos-tagger, after"},{"name":"POSWindow","description":"Feature extractor that senses the parts of speech of the four context words immediately surrounding the target word (two before and two after).\nKeywords: pos-tagger, window","testcode":"test() throws Exception {        System.out.println(\"POSWindow Feature Extractor\");        // Using the first TA and a constituent between span of 30-40 as a test        TextAnnotation ta \u003d tas.get(2);        View TOKENS \u003d ta.getView(\"TOKENS\");        System.out.println(\"GOT TOKENS FROM TEXTAnn\");        List\u003cConstituent\u003e testlist \u003d TOKENS.getConstituentsCoveringSpan(0, 20);        for (Constituent c : testlist) {            System.out.println(c.getSurfaceForm());        }        System.out.println(\"Testlist size is \" + testlist.size());        POSBaseLineCounter posBaseLine \u003d new POSBaseLineCounter(\"posBaseLine\");        posBaseLine.buildTable(TestPosHelper.corpus);        POSMikheevCounter posMikheev \u003d new POSMikheevCounter(\"posMikheev\");        posMikheev.buildTable(TestPosHelper.corpus);        POSWindow posWindowPOS \u003d new POSWindow(\"posWindowPOS\");        POSWindow posWindowPOSBaseLine \u003d new POSWindow(\"posWindowPOSBaseLine\", posBaseLine);        POSWindow posWindowPOSMikheev \u003d new POSWindow(\"posWindowPOSMikheev\", posMikheev);        // Test when using POS View        ArrayList\u003cSet\u003cFeature\u003e\u003e featslist \u003d new ArrayList\u003c\u003e();        for (Constituent test : testlist)            featslist.add(posWindowPOS.getFeatures(test));        if (featslist.isEmpty()) {            System.out.println(\"Feats list is returning NULL.\");        }        System.out.println(\"\\n\" + \"Test when using POS View\");        System.out.println(\"Printing list of Feature set\");        for (Set\u003cFeature\u003e feats : featslist) {            System.out.println(\"\\n\");            for (Feature f : feats)                System.out.println(f.getName());        }        // Test when using POS baseline Counting        featslist.clear();        for (Constituent test : testlist)            featslist.add(posWindowPOSBaseLine.getFeatures(test));        if (featslist.isEmpty()) {            System.out.println(\"Feats list is returning NULL.\");        }        System.out.println(\"\\n\" + \"Test when using POS baseline Counting\");        System.out.println(\"Printing list of Feature set\");        for (Set\u003cFeature\u003e feats : featslist) {            System.out.println(\"\\n\");            for (Feature f : feats)                System.out.println(f.getName());        }        // Test when using POS Mikheev Counting        featslist.clear();        for (Constituent test : testlist)            featslist.add(posWindowPOSMikheev.getFeatures(test));        if (featslist.isEmpty()) {            System.out.println(\"Feats list is returning NULL.\");        }        System.out.println(\"\\n\" + \"Test when using POS Mikheev Counting\");        System.out.println(\"Printing list of Feature set\");        for (Set\u003cFeature\u003e feats : featslist) {            System.out.println(\"\\n\");            for (Feature f : feats)                System.out.println(f.getName());        }        System.out.println(\"GOT FEATURES YES!\");    }    private void testFex(FeatureExtractor fex, boolean printBoth, String... viewNames)            throws EdisonException {        for (TextAnnotation ta : tas) {            for (String viewName : viewNames)                if (ta.hasView(viewName))                    System.out.println(ta.getView(viewName));        }    }}","javadoc_url":"http://cogcomp.cs.illinois.edu/software/doc/apidocs/edu/illinois/cs/cogcomp/edison/features/POSWindow.html","annotations":"pos-tagger, window"}]